---
const response = await fetch(
    `https://opensheet.elk.sh/1Hww9j0A8B4cc24gzqDgK5alCsr5kG3nE1uYjSc9HiN0/1`,
);
const data = await response.json();

const overallPoints = data
    .map((item: any) => ({
        name: item.Fclty,
        points: Number(item.Overall) || 0,
    }))
    .sort((a: any, b: any) => b.points - a.points)
    .map((item: any, index: number) => ({
        ...item,
        rank: index + 1,
    }));

interface EventArray {
    id: number;
    title: string;

    date: string;
    description: string;
    sport: string;
    location: string;
}

const EVENTS: EventArray[] = [
    {
        id: 1,
        title: "Inter Faculty Swimming Championship",
        date: "June 28",
        description: "Annual summer sports competition",
        sport: "Swimming",
        location: "Thurstan Swimming Pool",
    },
];
---

<div class="flex flex-row items-stretch">
    <div class="relative inline-block text-left">
        <button
            id="filterButton"
            class="h-full p-2 rounded-lg bg-[var(--color-background)] border border-[var(--color-border)] hover:bg-gray-200 transition-colors"
            aria-label="Event Leaderboard"
            onclick="window.location.href='/'"
        >
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-waves-ladder-icon lucide-waves-ladder"
                ><path d="M19 5a2 2 0 0 0-2 2v11"></path><path
                    d="M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
                ></path><path d="M7 13h10"></path><path d="M7 9h10"></path><path
                    d="M9 5a2 2 0 0 0-2 2v11"></path></svg
            >
        </button>
    </div>

    <div
        class="w-full max-w-5xl overflow-x-auto md:overflow-hidden mx-4 snap-x snap-mandatory scrollbar-hide"
    >
        <div
            id="carouselContainer"
            class="flex transition-transform duration-300 ease-in-out"
        >
            {
                EVENTS.map((event) => (
                    <div class="relative flex-none w-full pr-2 snap-center">
                        <a href="/">
                            <div class="bg-[var(--color-background)] p-6 pb-2 rounded-lg border border-[var(--color-border)] h-full">
                                <p class="text-sm md:text-lg font-bold text-gray-800 mb-1">
                                    {event.date}
                                </p>
                                <h3 class="text-xs md:text-lg font-medium text-gray-800 mb-1">
                                    {event.title}
                                </h3>
                                <div class="flex items-center mb-1">
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        width="15"
                                        height="15"
                                        viewBox="0 0 24 24"
                                        fill="none"
                                        stroke="currentColor"
                                        stroke-width="2"
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        class="lucide lucide-map-pin"
                                    >
                                        <>
                                            <path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0" />
                                            <circle cx="12" cy="10" r="3" />
                                        </>
                                    </svg>
                                    <span class="ml-2 text-xs md:text-sm font-thin">
                                        {event.location}
                                    </span>
                                </div>
                                {overallPoints.length >= 3 && (
                                    <div class="flex justify-end w-full">
                                        <p class="text-lg mr-2">
                                            üèÜ{" "}
                                            <span class="text-sm font-bold">
                                                {overallPoints[0].name}
                                            </span>
                                        </p>
                                        <p class="text-lg mr-2">
                                            ü•à{" "}
                                            <span class="text-sm font-bold">
                                                {overallPoints[1].name}
                                            </span>
                                        </p>
                                        <p class="text-lg">
                                            ü•â{" "}
                                            <span class="text-sm font-bold">
                                                {overallPoints[2].name}
                                            </span>
                                        </p>
                                    </div>
                                )}
                            </div>
                        </a>
                    </div>
                ))
            }
        </div>
    </div>

    <div class="hidden md:flex flex-col gap-1 mx-4">
        <button
            id="prevButton"
            class="p-2 h-1/2 rounded-lg bg-[var(--color-background)] border border-[var(--color-border)] hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Previous events"
        >
            <!-- <ChevronLeft className="w-4 h-4" /> -->
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-chevron-left"
                ><path d="m15 18-6-6 6-6"></path></svg
            >
        </button>
        <button
            id="nextButton"
            class="p-2 h-1/2 rounded-lg bg-[var(--color-background)] border border-[var(--color-border)] hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Next events"
        >
            <!-- <ChevronRight className="w-4 h-4" /> -->
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-chevron-right"
                ><path d="m9 18 6-6-6-6"></path></svg
            >
        </button>
    </div>

    <button
        class="p-2 rounded-lg bg-[var(--color-background)] border border-[var(--color-border)] hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="View Leaderboard"
        onclick="window.location.href='/faculty'"
    >
        <!-- <ChartNoAxesColumn className="w-6 h-6" /> -->
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="lucide lucide-chart-no-axes-column"
            ><line x1="18" x2="18" y1="20" y2="10"></line><line
                x1="12"
                x2="12"
                y1="20"
                y2="4"></line><line x1="6" x2="6" y1="20" y2="14"></line></svg
        >
    </button>
</div>

<script>
    import { EVENTS } from "../lib/constants";

    const filterButton = document.getElementById("filterButton");
    const filterDropdown = document.getElementById("filterDropdown");
    const prevButton = document.getElementById("prevButton");
    const nextButton = document.getElementById("nextButton");
    const carouselContainer = document.getElementById("carouselContainer");

    let currentIndex = 0;
    const cardsToShow = 3;
    const maxIndex = Math.max(0, EVENTS.length - cardsToShow);

    prevButton?.addEventListener("click", () => {
        currentIndex = Math.max(0, currentIndex - 1);
        updateCarouselPosition();
    });

    nextButton?.addEventListener("click", () => {
        currentIndex = Math.min(maxIndex, currentIndex + 1);
        updateCarouselPosition();
    });

    function updateCarouselPosition() {
        if (carouselContainer) {
            carouselContainer.style.transform = `translateX(-${currentIndex * (100 / cardsToShow)}%)`;
        }
        updateButtonStates();
    }

    function updateButtonStates() {
        if (prevButton)
            (prevButton as HTMLButtonElement).disabled = currentIndex === 0;
        if (nextButton)
            (nextButton as HTMLButtonElement).disabled =
                currentIndex === maxIndex;
    }

    // Initial button states
    updateButtonStates();
</script>
