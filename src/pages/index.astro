---
// import EventCarousel from "../components/EventCarousel.astro";
import Layout from "../layouts/Layout.astro";
import type { Points, Event } from "../lib/types";
import { FACULTY_OPTIONS } from "../lib/constants";
// import FacultyLeaderboard from "../components/FacultyLeaderboard.astro";

import { supabase } from "../lib/supabase";
let overallPoints: Points[] = [];
let menPoints: Points[] = [];
let womenPoints: Points[] = [];
const { data, error } = await supabase
	.from("swims")
	.select("*")
	.order("time", { ascending: true });

if (error) {
	console.error("Error fetching events:", error);
} else {
	overallPoints = FACULTY_OPTIONS.map((faculty) => ({
		name: faculty.key,
		points: data
			.filter((item) => item.faculty_id === faculty.id)
			.reduce((sum, item) => sum + (item.points || 0), 0),
	}))
		.sort((a, b) => b.points - a.points)
		.map((faculty, index, array) => ({
			...faculty,
			rank:
				index > 0 && faculty.points === array[index - 1].points
					? (array[index - 1] as Points).rank
					: index + 1,
		}));

	// Process men's points
	menPoints = FACULTY_OPTIONS.map((faculty) => ({
		name: faculty.key,
		points: data
			.filter(
				(item) =>
					item.faculty_id === faculty.id && (item.event_id ?? 0) > 16,
			)
			.reduce((sum, item) => sum + (item.points || 0), 0),
	}))
		.sort((a, b) => b.points - a.points)
		.map((faculty, index, array) => ({
			...faculty,
			rank:
				index > 0 && faculty.points === array[index - 1].points
					? (array[index - 1] as Points).rank
					: index + 1,
		}));

	// Process women's points
	womenPoints = FACULTY_OPTIONS.map((faculty) => ({
		name: faculty.key,
		points: data
			.filter(
				(item) =>
					item.faculty_id === faculty.id &&
					(item.event_id ?? 0) <= 16,
			)
			.reduce((sum, item) => sum + (item.points || 0), 0),
	}))
		.sort((a, b) => b.points - a.points)
		.map((faculty, index, array) => ({
			...faculty,
			rank:
				index > 0 && faculty.points === array[index - 1].points
					? (array[index - 1] as Points).rank
					: index + 1,
		}));
}
---

<Layout>
	<!-- <FacultyLeaderboard data={data ?? []} /> -->
	<div class="flex flex-col">
		<main
			class="grid flex-1 gap-4 overflow-auto p-4 md:grid-cols-2 lg:grid-cols-3"
		>
			<div
				class="flex h-full flex-col rounded-xl bg-[var(--color-muted)]/60 p-4 md:col-span-2"
			>
				<div class="relative">
					<div
						class="inline-flex justify-start bg-[var(--color-muted)]/60 rounded-lg p-1"
					>
						<input
							type="radio"
							id="overall"
							name="tabs"
							value="overall"
							class="hidden peer/overall"
							checked
						/>
						<label
							for="overall"
							class="text-xs md:text-sm px-3 py-1.5 cursor-pointer rounded-md peer-checked/overall:bg-white peer-checked/overall:text-black transition-all"
							>Overall</label
						>

						<input
							type="radio"
							id="men"
							name="tabs"
							value="men"
							class="hidden peer/men"
						/>
						<label
							for="men"
							class="text-xs md:text-sm px-3 py-1.5 cursor-pointer rounded-md peer-checked/men:bg-white peer-checked/men:text-black transition-all"
							>Men</label
						>

						<input
							type="radio"
							id="women"
							name="tabs"
							value="women"
							class="hidden peer/women"
						/>
						<label
							for="women"
							class="text-xs md:text-sm px-3 py-1.5 cursor-pointer rounded-md peer-checked/women:bg-white peer-checked/women:text-black transition-all"
							>Women</label
						>
					</div>

					<div class="mt-4">
						<div id="overallTable" class="block">
							<div class="relative w-full overflow-auto">
								<table class="w-full caption-bottom text-sm">
									<thead class="[&_tr]:border-b">
										<tr
											class="border-[var(--color-border)] transition-colors hover:bg-[var(--color-background)]/50 data-[state=selected]:bg-[var(--color-background)]"
										>
											<th
												scope="col"
												class="px-3 text-xs md:text-sm md:px-4 h-12 text-left align-middle font-medium text-[var(--color-muted-foreground)]"
												>Rank</th
											>
											<th
												scope="col"
												class="px-3 text-xs md:text-sm md:px-4 h-12 text-left align-middle font-medium text-[var(--color-muted-foreground)]"
												>Faculty</th
											>
											<th
												scope="col"
												class="px-3 text-xs md:text-sm md:px-4 h-12 text-left align-middle font-medium text-[var(--color-muted-foreground)]"
												>Points</th
											>
										</tr>
									</thead>
									<tbody class="[&_tr:last-child]:border-0">
										{
											overallPoints &&
												overallPoints
													.filter(
														(faculty) =>
															faculty.points > 0,
													)
													.map((faculty) => (
														<tr class="border-[var(--color-border)] transition-colors hover:bg-[var(--color-background)]/50">
															<td class="px-3 text-sm justify-center md:text-sm py-4 align-middle">
																{faculty.rank ===
																1 ? (
																	<span class="text-3xl">
																		ðŸ¥‡
																	</span>
																) : faculty.rank ===
																  2 ? (
																	<span class="text-3xl">
																		ðŸ¥ˆ
																	</span>
																) : faculty.rank ===
																  3 ? (
																	<span class="text-3xl">
																		ðŸ¥‰
																	</span>
																) : (
																	<span class="pl-2">
																		{
																			faculty.rank
																		}
																	</span>
																)}
															</td>
															<td class="px-3 md:px-4 py-4 align-middle">
																<span class="inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-xs md:text-sm border-transparent bg-[var(--color-secondary)] text-secondary-foreground hover:bg-[var(--color-secondary)]/80">
																	{
																		faculty.name
																	}
																</span>
															</td>
															<td class="px-4 py-4 text-xs md:text-sm md:px-4 md:text-sm align-middle">
																{faculty.points /
																	10}
															</td>
														</tr>
													))
										}
									</tbody>
								</table>
							</div>
						</div>
						<!-- <div id="menTable" class="hidden">
							<FacultyTable data={menPoints} />
						</div>
						<div id="womenTable" class="hidden">
							<FacultyTable data={womenPoints} />
						</div> -->
					</div>
				</div>
			</div>
		</main>
	</div>
</Layout>
